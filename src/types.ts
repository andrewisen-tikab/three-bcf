import * as z from 'zod';
import * as THREE from 'three';
import TopicSchema_Core from './core/topic';
import { FILE_EXTENSIONS, WORKER_EVENT_TYPES } from './constants';

/**
 * Helper type to make all properties of T nullable.
 */
export type Nullable<T> = {
    [K in keyof T]: T[K] | null;
};

/**
 * Supported file extensions for the generated BCF file.
 */
export type FileExtension = (typeof FILE_EXTENSIONS)[keyof typeof FILE_EXTENSIONS];

/**
 * Chosen file extension for the generated BCF file.
 */
export const EXTENSION: FileExtension = FILE_EXTENSIONS.BCF;

/**
 * Event types that can be **received** (!) by the worker.
 */
export type WorkerEventType = (typeof WORKER_EVENT_TYPES)[keyof typeof WORKER_EVENT_TYPES];

/**
 * THREE.Vector3Tuple as schema.
 */
export const Vector3TupleSchema = z.tuple([z.number(), z.number(), z.number()]);

/**
 * Default THREE.Vector3Tuple.
 */
export const DEFAULT_VECTOR3_TUPLE = new THREE.Vector3(-1, -1, -1).toArray();

/**
 * `TopicFolderBase` as schema indented for the `three.js`.
 */
export const TopicFolderBaseSchema_Three = TopicSchema_Core.extend({
    /**
     * Position of the camera in local three.js space.
     */
    position: Vector3TupleSchema,
    /**
     * Direction of the camera in local three.js space.
     */
    direction: Vector3TupleSchema,
    /**
     * target vector of the camera in local three.js space.
     */
    target: Vector3TupleSchema,
    /**
     * Field of view of the perspective camera.
     */
    fieldOfView: z.number().min(1).max(140),
    /**
     * Aspect ratio of the perspective camera.
     */
    aspectRatio: z.number().min(0.1).max(4),
});

/**
 * `TopicFolderBase` indented for the `three.js`.
 */
export type TopicFolderBase_Three = z.infer<typeof TopicFolderBaseSchema_Three>;

/**
 * `TopicFolder` as schema indented for the `three.js`.
 */
export const TopicFolderSchema_Three = TopicFolderBaseSchema_Three.extend({
    uuid: z.string(),
    /**
     * Screenshot as a base64 string generated by three.js.
     */
    screenshot: z.string(),
}).merge(TopicSchema_Core.pick({ topicType: true, topicStatus: true }));

/**
 * `Topic` as JSON type indented for the `three.js`.
 */
export type TopicFolder_ThreeJSON = z.infer<typeof TopicFolderSchema_Three>;

/**
 * `TopicFolder` as schema indented for the `worker`.
 */
export const TopicFolderSchema_Worker = TopicSchema_Core.merge(
    TopicFolderSchema_Three.pick({ screenshot: true }),
)
    .extend({
        cameraViewPoint: Vector3TupleSchema,
        cameraDirection: Vector3TupleSchema,
        cameraUpVector: Vector3TupleSchema,
    })
    .merge(TopicFolderBaseSchema_Three.pick({ fieldOfView: true, aspectRatio: true }));

/**
 * `TopicFolder` indented for the `worker`.
 */
export type TopicFolder_Worker = z.infer<typeof TopicFolderSchema_Worker>;

/**
 * Params for creating BCF topic inside a worker.
 */
export interface CreateParams_Worker extends TopicFolder_Worker {
    topicGuid: string;
    viewpointGuid: string;
    index: number;
}

/**
 * Params for creating BCF file.
 */
export type WorkerEventPostMessageData = {
    type: WorkerEventType;
    topics: TopicFolder_Worker[];
};

/**
 * Generic params for communicating with the worker.
 */
export interface WorkerEventPostMessageParams extends MessageEvent {
    data: WorkerEventPostMessageData;
}

/**
 * Generic params for communicating with the main thread.
 */
export interface WorkerEventOnMessageParams {
    type: WorkerEventType;
    data: string | Blob;
}
